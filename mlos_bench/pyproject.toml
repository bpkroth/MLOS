[build-system]
requires = ["setuptools", "setuptools-scm>=8.1.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mlos-bench"
description = "MLOS Bench Python interface for benchmark automation and optimization."
keywords = [
    "autotuning",
    "benchmarking",
    "optimization",
    "systems",
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
]
license = { "text" = "MIT" }
requires-python = ">=3.8"
authors = [
    { name = "Microsoft", email = "mlos-maintainers@service.microsoft.com" },
]
maintainers = [
    { name = "Microsoft", email = "mlos-maintainers@service.microsoft.com" },
]
dynamic = [
    "readme",   # urls get dynamically mutated by the build process
    "version",  # managed by setuptools_scm
]

dependencies = [
    # Note: currently mlos-core and mlos-bench are tightly coupled and released as a
    # unit so the versions should match.
    "mlos-core", # ==" + VERSION,   # FIXME

    "ConfigSpace>=0.7.1",
    "requests",
    "json5",
    "jsonschema>=4.18.0", "referencing>=0.29.1",
    "importlib_resources; python_version<'3.10'",

    "sqlalchemy",   # NOTE: For now sqlite is a fallback storage backend, so we always install it.
]

[project.optional-dependencies]
# Additional tools for extra functionality.
"azure" = ["azure-storage-file-share", "azure-identity", "azure-keyvault"]
"ssh" = ["asyncssh"]
"storage-sql-duckdb" = ["sqlalchemy", "duckdb_engine"]
"storage-sql-mysql" = ["sqlalchemy", "mysql-connector-python"]
"storage-sql-postgres" = ["sqlalchemy", "psycopg2"]
"storage-sql-sqlite" = ["sqlalchemy"]   # sqlite3 comes with python, so we don't need to install it.
# Transitive extra_requires from mlos-core.
"flaml" = ["flaml[blendsearch]"]
"smac" = ["smac"]

# Meta targets to install everything.
# NOTE: Be sure to add new extras from above to these.
full = ["mlos-bench[azure,ssh,storage-sql-duckdb,storage-sql-mysql,storage-sql-postgres,storage-sql-sqlite,flaml,smac]"]
full-tests = [
    "mlos-bench[full]",
    # Test requirements for mlos-bench:
    "pytest",
    "pytest-forked",
    "pytest-xdist",
    "pytest-cov",
    "pytest-local-badge",
    "pytest-lazy-fixtures",
    "pytest-docker",
    "fasteners",
]

[project.scripts]
mlos_bench = "mlos_bench.run:_main"

[project.urls]
Documentation = "https://microsoft.github.io/MLOS/"
Repository = "https://github.com/microsoft/MLOS/"
Issues = "https://github.com/microsoft/MLOS/issues"
"Package Source" = "https://github.com/microsoft/MLOS/tree/main/mlos_bench/"

# Tell setuptools_scm to use the root directory for git info.
# Note: when setuptools_scm is involved we also need to use MANIFEST.in to include/exclude files.
[tool.setuptools_scm]
root = ".."

# Tell setuptools where to find the package.
[tool.setuptools.packages.find]
exclude = ["*.tests", "*.tests.*"]

[tool.setuptools.package-data]
mlos_bench = [
    "py.typed", "**/*.pyi",
    "config/**/*.md",
    "config/**/*.jsonc",
    "config/**/*.json",
    "config/**/*.py",
    "config/**/*.sh",
    "config/**/*.cmd",
    "config/**/*.ps1",
]

[tool.distutils.bdist_wheel]
# Command option bdist_wheel.universal is not defined
#universal = 1
# https://github.com/pypa/wheel/issues/582
py-limited-api = "cp38"

# FIXME: Make sure the version is correct when we build the wheel.
